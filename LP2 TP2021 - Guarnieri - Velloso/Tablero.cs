///////////////////////////////////////////////////////////
//  Tablero.cs
//  Implementation of the Class Tablero
//  Generated by Enterprise Architect
//  Created on:      06-oct.-2021 08:09:08
//  Original author: vguar
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



public class Tablero {

	private static uint ContSoluciones;
	private ushort ID;

	//public Casilla m_Casilla;

	public Tablero(){

	}

	~Tablero(){

	}

	public Tablero Espejar(){

		return null;
	}

	public void FiltrarFatales(){

	}

	public void Imprimir(){

	}

	public void Limpiar(){

	}

	/*PintarTablero(ficha), Atacar es "pintar" las casillas, es decir Casilla.me estan tapando = true.
	Si la ficha es Reina
	Ataque de Reina
	Si la ficha es Alfil:
	Atacar diagonales
	Si la ficha es Torre:
	Atacar fila y columna
	Si la ficha es Caballo
	Atacar "periferia" 
	Si la ficha es Rey
	Atacar alrededores*/

	/// 
	/// <param name="Ficha"></param>
	public void Pintar(Ficha Ficha){
		Ficha.Atacar(this); //TODO: this?
							//TDOO: C# entiende a qué atacar tiene que ir? Al de Reina, Alfil... Cómo hacemos el dynamic
        
	}

    /// 
    /// <param name="Ficha"></param>
    /// <param name="ListaPos"></param>
    public void Posicionar(Ficha Ficha) {
        //Variables locales
        Random r = new Random();
        Casilla newPos = new Casilla();

        newPos.SetFila(Convert.ToUInt16(r.Next(0, 8)));
        newPos.SetColumna(Convert.ToUInt16(r.Next(0, 8)));

        if (!newPos.Ocupar()) //Recursividad
            Posicionar(Ficha);
		Ficha.Atacar(this); //TODO: this?
	}

    public Tablero Rotar() {

		return null;
	}

}//end Tablero