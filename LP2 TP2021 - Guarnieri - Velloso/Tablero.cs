///////////////////////////////////////////////////////////
//  Tablero.cs
//  Implementation of the Class Tablero
//  Generated by Enterprise Architect
//  Created on:      06-oct.-2021 08:09:08
//  Original author: vguar
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Diagnostics;

/// <summary>
/// Enum para definir el Color de las Casillas.
/// </summary>
public enum Color : int
{
    BLANCO = 0,
    NEGRO

} //end Color

public class Tablero
{
    #region ATRIBUTOS

    /// <summary>
    /// Matriz de Casillas del <see cref="Tablero"/>.
    /// </summary>
    public Casilla[,] Matriz = new Casilla[8, 8]; //Acceso publico, para que las fichas se puedan posicionar y atacar

    /// <summary>
    /// Pila de Fichas (se llena a medida que se posicionan las Ficha) del <see cref="Tablero"/>.
    /// </summary>
    private Stack<Ficha> PilaPosicionadas = new Stack<Ficha>(8);

    #endregion

    #region CONSTRUCTORES & DESTRUCTORES

    /// <summary>
    /// Constructor de la clase <see cref="Tablero"/>.: inicializa la Matriz de Casillas.
    /// </summary>
    public Tablero()
    {
        //Creamos la matriz de Casillas (tiempo n^2, fors anidados)
        for (uint i = 0; i < 8; ++i)
        {
            for (uint j = 0; j < 8; ++j)
            {
                Matriz[i, j] = new Casilla(i, j);
            }
        }
        LeerArchivo();
    }

    /// <summary>
    /// Constructor por copia de la clase <see cref="Tablero"/>..
    /// </summary>
    /// <param name="newTablero"></param>
    public Tablero(Tablero newTablero)
    {
        Matriz = newTablero.Matriz; //TODO: preguntar si esto es válido
        PilaPosicionadas = newTablero.PilaPosicionadas;
    }

    /// <summary>
    /// Destructor de la clase <see cref="Tablero"/>..
    /// </summary>
    ~Tablero()
    {

    }

    #endregion

    #region LEER TXT

    /// <summary>
    /// Leemos el archivo con 1's y 0's para determinar el color de las Casillas del Tablero this.
    /// </summary>
    private void LeerArchivo()
    {
        string[] lines = System.IO.File.ReadAllLines("ColoresTablero.txt"); //Leo el archivo de colores
        int j = 0;

        foreach (string line in lines) //para cada linea
        {
            for (int i = 0; i < line.Length; i++)//recorro los caracteres de cada linea
                Matriz[j, i].Colour = line[i] == '0' ? Color.BLANCO : Color.NEGRO; //le asigno el color a cada casilla

            j++;
        }
    }

    #endregion

    #region METODOS DE TABLERO

    /// <summary>
    /// Retorna true si el Tablero this es una solución al problema de la cobertura total del Tablero de Ajedrez, con las Fichas atacando de forma fatal.
    /// </summary>
    /// <returns></returns>
    public bool FiltrarFatales() //TODO: Si devuelve true, en el main lo agrego a la lista de fatales.
    {
        //La idea es ir sacando las fichas y ver en donde estan
        /* TableroFisico.FiltrarFatales()  -> Este tablero fisico no esta "pintado", el que está pintado es el de Ataque
         * Podríamos hacer una copia de este tablero físico, y llamarlo Tablero filtrado, y pintar a tablero filtrado
         */
        Tablero Filtrado = new Tablero(this); //es una copia del tablero fisico

        for (uint i = 0; i < 8; ++i) //recorremos la pila de fichas en el tablero de copia
        {
            Ficha aux = Filtrado.PilaPosicionadas.Pop();
            Casilla pos = Buscar(aux);
            aux.Atacar(Filtrado, pos, true);//"pintar casilleros" de forma fatal (true)
        }
        return (Filtrado.VerificarSolucion()) ? true : false; //si es una solución fatal, devulve true y sino devuelve false
    }

    public void Imprimir()
    {

        //Boton: print
    }

    /// <summary>
    /// Limpia el Tablero this: Las Casillas no están atacadas, ni ocupadas, y las Fichas son null.
    /// </summary>
    public void Limpiar()
    {
        for (uint i = 0; i < 8; i++)
        {
            for (uint j = 0; j < 8; j++)
            {
                Matriz[i, j].SetAtacada(false);
                Matriz[i, j].SetFicha(null);
                Matriz[i, j].SetOcupada(false);
            }
        }
        PilaPosicionadas.Clear();
        //Boton: clear
    }

    /// <summary>
    /// Ubica a la Ficha que le llega por parámetro en una Casilla de la SubLista que le llega por parámetro.
    /// Segun el parámetro booleano "Remove", quita de la SubLista la Casilla donde se ubico la Ficha. //TODO: ACA PUNTERO O COPIA!!
    /// Llama a la función Ataque de Ficha, con el Tablero Ataque.
    /// </summary>
    /// <param name="Fichita"></param>
    /// <param name="Ataque"></param>
    /// <param name="SubLista"></param>
    /// <param name="Remove"></param>
    public void Posicionar(Ficha Fichita, Tablero Ataque, List<Casilla> SubLista, bool Remove = true) //Se administra desde el main
    {
        //Variable
        Random r = new Random();
        int index = r.Next(SubLista.Count); //Elegimos un índice random de la SubLista 

        uint i = SubLista[index].GetFila();
        uint j = SubLista[index].GetColumna();

        if (Fichita.GetName() == "Alfil2")
        {
            Ficha FichaAux = PilaPosicionadas.Peek(); //el ultimo simpre es Alfil1
            try
            {
                while (Matriz[i,j].GetColor() == Buscar(FichaAux).GetColor()) //Mientras los dos alfiles sean del mismo color
                {
                    index = r.Next(SubLista.Count); //Elegimos un índice random de la SubLista 

                    i = SubLista[index].GetFila();
                    j = SubLista[index].GetColumna();
                }
            }
            catch (Exception ex)
            {
                throw ex; //TODO: nos tira el error cuando el color de las casillas son iguales
            }
        }

        //Ocupamos la casilla con la fichita
        Matriz[i, j].SetFicha(Fichita);
        Matriz[i, j].SetOcupada(true);

        Fichita.Atacar(Ataque, Matriz[i,j]); //Es la funcion que "pinta" --> OJO porque no es la filtrada

        PilaPosicionadas.Push(Fichita);
        if (Remove)
            SubLista.RemoveAt(index); //Sacamos de la lista al elemento ocupado, para que otros no lo puedan ocupar.

    }

    /// <summary>
    /// Imprime en Consola las fichas del Tablero
    /// </summary>
    public void ImprimirConsola()
    {
        for (uint i =0; i < 8; ++i)
        {
            for(uint j =0; j < 8; ++j)
            {
                if(Matriz[i,j].Fichita == null)
                {
                    Debug.Write("  ##   ");
                }
                else
                {
                    if (Matriz[i, j].Fichita.GetName() == "Reina")
                        Debug.Write(" Reina  ");
                    else if (Matriz[i, j].Fichita.GetName() == "Rey")
                        Debug.Write("  Rey   ");
                    else if (Matriz[i, j].Fichita.GetName() == "Torre1" || Matriz[i, j].Fichita.GetName() == "Torre2")
                        Debug.Write(" Torre  ");
                    else if (Matriz[i, j].Fichita.GetName() == "Caballo1" || Matriz[i, j].Fichita.GetName() == "Caballo2")
                        Debug.Write(" Caballo ");
                    else
                        //(Matriz[i, j].Fichita.GetName() == "Alfil1" || Matriz[i, j].Fichita.GetName() == "Alfil2")
                        Debug.Write(" Alfil ");
                }
                
            }
            Debug.Write("\n");
        }
        Debug.Write("\n\n");

    }

    #endregion

    #region MULTIPLICADORES DE SOLUCIONES

    /// <summary>
    /// Retorna un nuevo Tablero, que es igual al Tablero this pero rotado 90°.
    /// </summary>
    /// <returns></returns>
    public Tablero Rotar90()
    {
        Tablero Rotado = new Tablero(this); //TODO: si esto no nos hace una copia -> sobrecargar el operador =
        int t;
        for (int i = 0; i < 8; i++)
        {
            t = 0;
            for (int j = 7; j >= 0; j--)
            {
                Rotado.Matriz[i, t] = Matriz[j, i];
                t++;
            }
        }

        return Rotado;
    }

    /// <summary>
    /// Retorna un nuevo Tablero, que es igual al Tablero this pero espejado.
    /// </summary>
    /// <returns></returns>
    public Tablero Espejar()
    {
        Tablero Espejado = new Tablero(this); //copia del tablero original
        Casilla aux;
        for (int i = 0; i < 8; ++i)
        {
            for (int j = 0; j < 8; ++j)
            {
                aux = Matriz[i, j];
                Matriz[i, j] = Matriz[7 - i, j];
                Matriz[7 - i, j] = aux; //TODO: verificar que cuando cambiamos las casillas, se llevan con ellas las fichas
            }
        }

        return Espejado;
    }

    /// <summary>
    /// Retorna un nuevo Tablero, que es igual al Tablero this pero con las Torres con las columnas intercambiadas, 
    /// siempre que se ubiquen en Casillas con distinta Columna o Fila. 
    /// </summary>
    /// <returns></returns>
    public Tablero IntercambiarTorres()
    {
        Tablero Intercambiado = new Tablero(this);
        Casilla T1;
        Casilla T2;

        try
        {
            T1 = Intercambiado.BuscarXNombre("Torre1");
            T2 = Intercambiado.BuscarXNombre("Torre2");
        }
        catch (Exception ex)
        {
            throw ex; //MessageBox
        }

        if (T1.GetColumna() != T2.GetColumna() || T1.GetFila() != T2.GetFila())
        {
            uint ColAux = T1.GetColumna();
            T1.SetColumna(T2.GetColumna());
            T2.SetColumna(ColAux);
            return Intercambiado;
        }
        throw new Exception("\n----- Error en IntercambiarTorres: Torre1 y Torre2 están en la misma fila/ columna ----- ");
    }

    #endregion

    #region VERIFICACIONES

    /// <summary>
    /// Retorna true si el Tablero this es una solución al problema de la cobertura total del Tablero de Ajedrez.
    /// </summary>
    /// <returns></returns>
    public bool VerificarSolucion()
    {
        for (int i = 0; i < 8; i++)
        {
            for (int j = 0; j < 8; j++)
            {
                if (!Matriz[i, j].GetAtacada())
                    return false;
            }
        }
        return true;
    }

    /// <summary>
    /// Retorna true si el Tablero que le llega por parámetro es distinto a this, en otro caso retorna false
    /// </summary>
    /// <param name="T"></param>
    /// <returns></returns>
    public bool VerificarSolucionesDistintas(Tablero T)
    {
        for (uint i = 0; i < 8; i++)
        {
            for (uint j = 0; j < 8; j++)
            {
                if (Matriz[i, j].GetOcupada() && !(T.Matriz[i, j].GetOcupada()) || !(Matriz[i, j].GetOcupada()) && T.Matriz[i, j].GetOcupada())
                    return true;
                else if (Matriz[i, j].GetOcupada() && T.Matriz[i, j].GetOcupada())
                    if (Matriz[i, j].Fichita.GetType() != T.Matriz[i, j].Fichita.GetType()) //TODO: chequear
                        return true;
            }
        }

        return false;
    }

    #endregion

    #region BUSCAR

    /// <summary>
    /// Retorna la casilla donde está la Ficha que le llega por parámetro.
    /// </summary>
    /// <param name="Fichita"></param>
    /// <returns></returns>
    public Casilla Buscar(Ficha Fichita)
    {
        for (int i = 0; i < 8; ++i)
            for (int j = 0; j < 8; ++j)
                if (Matriz[i, j].Fichita == Fichita)
                    return Matriz[i, j];
        throw new Exception("\n----- Error en buscar: " + Fichita.GetName() + " no está en el Tablero ----- ");
    } //TODO: VER CUAL ALGORITMO DE BUSQUEDA USAR

    /// <summary>
    /// Retorna la casilla donde está la Ficha con el nombre que le llega por parámetro.
    /// </summary>
    /// <param name="Name"></param>
    /// <returns></returns>
    public Casilla BuscarXNombre(string Name)
    {
        for (int i = 0; i < 8; ++i)
            for (int j = 0; j < 8; ++j)
            {
                if(Matriz[i,j].Fichita!=null)
                    if (Matriz[i, j].Fichita.GetName() == Name)
                        return Matriz[i, j];
            }
                
        throw new Exception("\n----- Error en BuscarXNombre: " + Name + "no está en el Tablero ----- ");
    } //TODO: VER CUAL ALGORITMO DE BUSQUEDA USAR

    #endregion

} //end Tablero