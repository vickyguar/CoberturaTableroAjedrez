///////////////////////////////////////////////////////////
//  Ficha.cs
//  Implementation of the Class Ficha
//  Generated by Enterprise Architect
//  Created on:      06-oct.-2021 08:09:07
//  Original author: vguar
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



public abstract class Ficha
{
    protected string Name;
   // protected Casilla Pos;
    //protected Casilla Posicion;

    #region CONSTRUCTOR & DESTRUCTOR
    public Ficha(string _Name)
    {
        Name = _Name;
    }

    ~Ficha()
    {

    }

    #endregion

    //TODO: Despues ver cómo ponerlo en la ToolBox


    #region ATAQUES
    public abstract void Atacar(Tablero Ataque, Casilla Pos, bool Fatal = false);

    public void Diagonal1(Tablero Ataque, Casilla Pos,bool Fatal) // ↘ 
    {
        uint j = Pos.GetColumna() + 1;
        uint i = Pos.GetFila() + 1;

        do
        {
            Ataque.Matriz[i, j].SetAtacada(true);

            if (Fatal && Ataque.Matriz[i, j].GetOcupada())
                break;

            i++;
            j++;
        } while (i < 8 || j < 8);
    }

    public void Diagonal2(Tablero Ataque, Casilla Pos, bool Fatal) // ↗ 
    {
        uint j = Pos.GetColumna() + 1;
        uint i = Pos.GetFila() - 1;

        do
        {
            Ataque.Matriz[i, j].SetAtacada(true);

            if (Fatal && Ataque.Matriz[i, j].GetOcupada())
                break;

            i--;
            j++;
        } while (i >= 0 || j < 8);
    }

    public void Diagonal3(Tablero Ataque, Casilla Pos, bool Fatal) // ↖ 
    {
        uint j = Pos.GetColumna() - 1;
        uint i = Pos.GetFila() - 1;

        do
        {
            Ataque.Matriz[i, j].SetAtacada(true);

            if (Fatal && Ataque.Matriz[i, j].GetOcupada())
                break;

            i--;
            j--;
        } while (i >= 0 || j >= 0);
    }

    public void Diagonal4(Tablero Ataque, Casilla Pos, bool Fatal) // ↙ 
    {
        uint j = Pos.GetColumna() - 1;
        uint i = Pos.GetFila() + 1;

        do
        {
            Ataque.Matriz[i, j].SetAtacada(true);

            if (Fatal && Ataque.Matriz[i, j].GetOcupada())
                break;

            i++;
            j--;
        } while (i < 8 || j >= 8);
    }

    public void Horizontal1(Tablero Ataque, Casilla Pos, bool Fatal) // → 
    {
        uint j = Pos.GetColumna() + 1;
        uint i = Pos.GetFila();

        do
        {
            Ataque.Matriz[i, j].SetAtacada(true);

            if (Fatal && Ataque.Matriz[i, j].GetOcupada())
                break;

            j++;
        } while (j < 8);
    }

    public void Horizontal2(Tablero Ataque, Casilla Pos, bool Fatal) // ← 
    {
        uint j = Pos.GetColumna() - 1;
        uint i = Pos.GetFila();

        do
        {
            Ataque.Matriz[i, j].SetAtacada(true);

            if (Fatal && Ataque.Matriz[i, j].GetOcupada())
                break;

            j--;
        } while (j >= 0);
    }

    public void Vertical1(Tablero Ataque, Casilla Pos, bool Fatal) // ↓ 
    {
        uint j = Pos.GetColumna();
        uint i = Pos.GetFila() + 1;

        do
        {
            Ataque.Matriz[i, j].SetAtacada(true);

            if (Fatal && Ataque.Matriz[i, j].GetOcupada())
                break;

            i++;
        } while (i < 8);
    }

    public void Vertical2(Tablero Ataque, Casilla Pos, bool Fatal) // ↑ 
    {
        uint j = Pos.GetColumna();
        uint i = Pos.GetFila() - 1;

        do
        {
            Ataque.Matriz[i, j].SetAtacada(true);

            if (Fatal && Ataque.Matriz[i, j].GetOcupada())
                break;

            i--;
        } while (i >= 0);
    }
    #endregion

    #region GETTERS
    public string GetName() { return Name; }
    #endregion


}//end Ficha