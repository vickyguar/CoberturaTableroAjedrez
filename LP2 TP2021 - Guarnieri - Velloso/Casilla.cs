///////////////////////////////////////////////////////////
//  Casilla.cs
//  Implementation of the Class Casilla
//  Generated by Enterprise Architect
//  Created on:      06-oct.-2021 08:09:07
//  Original author: vguar
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Drawing;
public class Casilla
{
    #region ATRIBUTOS

    /// <summary>
    /// <see cref="Color"/> de la <see cref="Casilla"/>.
    /// </summary>
    public eColor Colour;

    /// <summary>
    /// <see cref="Ficha"/> que tiene la <see cref="Casilla"/>.
    /// </summary>
    public Ficha Fichita;

    /// <summary>
    /// Ficha que se puede superponer (Caballo-Torre)
    /// </summary>
    public Ficha Superpuesta;

    /// <summary>
    /// Columna de la <see cref="Casilla"/>.
    /// </summary>
    private int Columna;

    /// <summary>
    /// Fila de la <see cref="Casilla"/>
    /// </summary>
    private int Fila;

    //ATRIBUTOS BOOLEANOS ---------
    private bool Ocupada;
    private bool Atacada;
    private bool AtacadaFatalmente;
    //-----------------------------

    #endregion

    #region CONSTRUCTOR & DESTRUCTOR

    /// <summary>
    /// Constructor de la clase <see cref="Casilla"/>.
    /// </summary>
    /// <param name="_Columna"></param>
    /// <param name="_Fila"></param>
    public Casilla(int _Fila, int _Columna)
    {
        Columna = _Columna;
        Fila = _Fila;
        Ocupada = false;
        Atacada = false;
        AtacadaFatalmente = false; 
        Fichita = null;
        Superpuesta = null;
        Colour = eColor.NEGRO; //Inicializo en Negro
    }

    /// <summary>
    /// Constructor por copia de la clase <see cref="Casilla"/>.
    /// </summary>
    /// <param name="newCasilla"></param>
    /// <param name="Fichita_"></param>
    /// <param name="Sup_"></param>
    public Casilla(Casilla newCasilla, Ficha Fichita_, Ficha Sup_ = null)
    {
        Columna = newCasilla.Columna;
        Fila = newCasilla.Fila;
        Ocupada = newCasilla.Ocupada;
        Atacada = newCasilla.Atacada;
        AtacadaFatalmente = newCasilla.AtacadaFatalmente;
        Fichita = Fichita_;
        Superpuesta = Sup_;
        Colour = newCasilla.Colour;
    }

    /// <summary>
    /// Destructor de la clase <see cref="Casilla"/>.
    /// </summary>
    ~Casilla()
    {

    }

    #endregion

    #region GETTERS

    public bool GetOcupada() { return Ocupada; }

    public bool GetAtacada() { return Atacada; }

    public bool GetAtacadaFatalmente() { return AtacadaFatalmente; }

    public int GetColumna() { return Columna; }

    public int GetFila() { return Fila; }

    public eColor GetColor() { return Colour; }

    #endregion

    #region SETTERS

    public void SetColumna(int newColumna) { Columna = newColumna; }

    public void SetFila(int newFila) { Fila = newFila; }

    public void SetAtacada(bool newAtacada) { Atacada = newAtacada; }

    public void SetAtacadaFatalmente(bool newAtacadaFatalmente) { AtacadaFatalmente = newAtacadaFatalmente; }

    public void SetOcupada(bool newOcupada) { Ocupada = newOcupada; }

    public void SetFicha(Ficha newFichita)
    {
        if (newFichita != null)
        {
            SetSuperpuesta(null); //SIEMPRE se pone primero la ficha y despues se superpone. Si estoy poniendo la ficha ==> las superpuesta es null
            Fichita = newFichita;
            SetOcupada(true);
            Fichita.Fila = (int)Fila;
            Fichita.Columna = (int)Columna;
        }
        else  //Cuando queremos vaciar la casilla, al SetFicha le pasamos null, por eso hacemos esta consideración.
        {
            Fichita = null;
            SetSuperpuesta(null);
            SetOcupada(false);
        }

    }

    public void SetSuperpuesta(Ficha newSuperpuesta)
    {
        if (newSuperpuesta != null)
        {
            Superpuesta = newSuperpuesta;
            SetOcupada(true);
        }
        else //Cuando queremos vaciar la casilla, al SetFicha le pasamos null, por eso hacemos esta consideración.
        {
            Superpuesta = null;
        }
    }


    #endregion

} //end Casilla